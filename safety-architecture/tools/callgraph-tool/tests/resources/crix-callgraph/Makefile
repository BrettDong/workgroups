CC      = clang
CFLAGS  = -O0 -g
INC     = -I./

CXX	        = clang++
CXXFLAGS    = -O0 -g -flto -fwhole-program-vtables -fvisibility=hidden

#  = means expand whenever used
# := means expand once
SHELL := /bin/bash
CLANG_BIN_DIR := /usr/lib/llvm-10/bin
CG_BIN := ../../../build/lib/crix-callgraph
PATH := $(CLANG_BIN_DIR):$(PATH)

# List of target c programs
PROGS = \
  test-mlta-basic\
  test-mlta-notassigned\
  test-mlta-arr\
  test-mlta-assign-value\
  test-mlta-confinestore\
  test-mlta-memcpy\
  test-mlta-null\
  test-mlta-x86-init\
  test-mlta-misc\
  test-inline\
  test-asminline\
  test-cast-struct\
  test-cast-fptr\
  test-bitfield\
  test-escape\
  test-sizeof\
  test-ta-mlta\
  test-union\

# List of target c++ programs
# TODO: remove test-virtual-func
PROGS_CXX = \
	test-hello\
	test-inheritance-basic\
	test-inheritance-global\
	test-inheritance-multilevel\
	test-inheritance-multiple-1\
	test-inheritance-multiple-2\
	test-inheritance-multiple-3\
	test-namespace-1\
	test-namespace-2\
	test-namespace-3\

define target_success
	@printf "\033[32m==> Target \"$(1)\" passed\033[0m\n\n"
endef

progs: $(PROGS)

progs-cxx: $(PROGS_CXX)

# Check clang is in PATH
.PHONY: clang-check
clang-check:
	@which clang >/dev/null
	@which clang++ >/dev/null
	@which llvm-link >/dev/null

cg-bin:
	# cd ../../../ && make LLVM_DIR=/home/hrosten/projects/llvm-project-10.0.0/prefix LLVM_VERSION=10.0.0 crix-callgraph
	cd ../../../ && make crix-callgraph

# Build bitcode files from the targets in PROGS
# Run CG_BIN to generate the callgraph for each bitcode target
.PHONY: $(PROGS)
$(PROGS): %: %.c clang-check cg-bin
	$(CC) $(CFLAGS) $(INC) -emit-llvm -c -o $@.bc $<
# To build .ll file:
#	$(CC) $(CFLAGS) $(INC) -emit-llvm -S -o $@.ll $<
# .bclist is just a list of .bc files that will be analyzed together
	echo $@.bc >$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null

# Build bitcode files from the targets in PROGS_CXX
# Run CG_BIN to generate the callgraph for each bitcode target
.PHONY: $(PROGS_CXX)
$(PROGS_CXX): %: %.cpp clang-check cg-bin
# Uses GCC's libstdc++ standard library
# By default clang uses GCC's C++ standard library, libstdc++:
	$(CXX) $(CXXFLAGS) $(INC) -emit-llvm -c -o $@.bc $<
# To build .ll file:
	$(CXX) $(CXXFLAGS) $(INC) -emit-llvm -S -o $@.ll $<
# To use LLVM C++ standard library instead, try:
#	$(CXX) $(CXXFLAGS) -stdlib=libc++ $(INC) -emit-llvm -c -o $@.bc $<
# .bclist is just a list of .bc files that will be analyzed together
	echo $@.bc >$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null

# Build bitcode files from the separate sub-project under cg-temp/
# Run CG_BIN to generate the callgraph 
.PHONY: cg-test-template
cg-test-template: cg-bin
	cd cg-temp && make bcfiles && find ~+ -type f -name \*.bc > ../$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null
	$(call target_success,$@)

.PHONY: test-opt
test-opt: clang-check cg-bin
# Build with -O0
	$(CC) -O0 -g $(INC) -emit-llvm -c -o $@-O0.bc $@.c
	echo $@-O0.bc >$@.bclist
# Build with -O1
	$(CC) -O1 -g $(INC) -emit-llvm -c -o $@-O1.bc $@.c
	echo $@-O1.bc >>$@.bclist
# -O1 generates nothing, but that's the point of this test
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null
	$(call target_success,$@)

test-same-funcname: clang-check cg-bin
	$(CC) $(CFLAGS) $(INC) -emit-llvm -c test-same-funcname.c -o $@.bc
	$(CC) $(CFLAGS) $(INC) -emit-llvm -c test-same-funcname.module.c -o module.bc
# To test the binary:
# $(CC) $(CFLAGS) $(INC) test-same-funcname.c test-same-funcname.module.c -o test-same-funcname
	echo $@.bc >$@.bclist
	echo module.bc >>$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null
	$(call target_success,$@)

test-modules: clang-check cg-bin
	$(CXX) $(CXXFLAGS) $(INC) -emit-llvm -c test-modules.base.cpp -o $@.bc
	$(CXX) $(CXXFLAGS) $(INC) -emit-llvm -c test-modules.child.cpp -o test-modules.child.bc
# To test the binary:
#	$(CXX) $(CXXFLAGS) $(INC) test-modules.base.cpp test-modules.child.cpp -o test-modules-cpp
	llvm-link test-modules.child.bc $@.bc > $@.linked.bc
	echo $@.linked.bc >$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null
	$(call target_success,$@)

# Generate expected_calls.csv, which
# will be used as a baseline to compare the results against
# when running the tests
expected_calls: progs progs-cxx cg-test-template test-opt test-same-funcname test-modules
# Remove earlier expected_calls.csv
	rm -f $@.csv
# Merge all csv files generated by prerequisite targets, keeping
# the csv header only from the first csv file
	awk 'FNR==1 && NR!=1{next;}{print}' *.csv > $@.csv
	make clean
	@printf "\nWrote: '$@.csv'\n"
	$(call target_success,$@)

# Clean everything except expected_calls.csv
clean:
	cd cg-temp && make clean
	find . -type f -name "*.bc" -delete
	find . -type f -name "*.ll" -delete
	find . -type f -name "*.bclist" -delete
	find . -type f -name "*.csv" -and ! -name "expected_calls.csv" -delete
