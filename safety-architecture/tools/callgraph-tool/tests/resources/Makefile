CC      = clang
CFLAGS  = -O0 -g
INC     = -I./

#  = means expand whenever used
# := means expand once
SHELL := /bin/bash
CLANG_BIN_DIR := /usr/lib/llvm-10/bin
CG_BIN := ../../build/lib/crix-callgraph
PATH := $(CLANG_BIN_DIR):$(PATH)

# List of target programs
PROGS = \
  test-mlta\
  test-inline\
  test-asminline\
  test-cast-struct\
  test-cast-fptr\
  test-bitfield\
  test-escape\
  test-sizeof\

#PROGS = direct

define target_success
	@printf "\033[32m==> Target \"$(1)\" passed\033[0m\n\n"
endef

progs: $(PROGS)

# Check clang is in PATH
.PHONY: clang-check
clang-check:
	@which clang >/dev/null

cg-bin:
	cd ../../ && make crix-callgraph

# Build bitcode files from the targets in PROGS
# Run CG_BIN to generate the callgraph for each bitcode target
.PHONY: $(PROGS)
$(PROGS): %: %.c clang-check cg-bin
	$(CC) $(CFLAGS) $(INC) -emit-llvm -c -o $@.bc $<
# .bclist is just a list of .bc files that will be analyzed together
	echo $@.bc >$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null

# Build bitcode files from the separate sub-project under cg-temp/
# Run CG_BIN to generate the callgraph 
.PHONY: cg-test-template
cg-test-template: cg-bin
	cd cg-temp && make bcfiles && find ~+ -type f -name \*.bc > ../$@.bclist
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null
	$(call target_success,$@)

.PHONY: test-opt
test-opt: clang-check cg-bin
# Build with -O0
	$(CC) -O0 -g $(INC) -emit-llvm -c -o $@-O0.bc $@.c
	echo $@-O0.bc >$@.bclist
# Build with -O1
	$(CC) -O1 -g $(INC) -emit-llvm -c -o $@-O1.bc $@.c
	echo $@-O1.bc >>$@.bclist
# -O1 generates nothing, but that's the point of this test
	$(CG_BIN) -o $@.csv @$@.bclist 2>/dev/null
	$(call target_success,$@)

# Generate expected_calls.csv, which
# will be used as a baseline to compare the results against
# when running the tests
expected_calls: progs cg-test-template test-opt
# Remove earlier expected_calls.csv
	rm -f $@.csv
# Merge all csv files generated by prerequisite targets, keeping
# the csv header only from the first csv file
	awk 'FNR==1 && NR!=1{next;}{print}' *.csv > $@.csv
	make clean
	@printf "\nWrote: '$@.csv'\n"
	$(call target_success,$@)

# Clean everything except expected_calls.csv
clean:
	cd cg-temp && make clean
	find . -type f -name "*.bc" -delete
	find . -type f -name "*.bclist" -delete
	find . -type f -name "*.csv" -and ! -name "expected_calls.csv" -delete
